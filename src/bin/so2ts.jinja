{% if info['use_ts_frida'] %}
import 'ts-frida'
{% else %}
        
 type MODINFO_BASETYPE = {

    /**
     * The function to be called when the module is unloaded.
     * This is an optional function.
     */
    unload? : ()=>void;

    /**
     * The name of the module.
     */
    name    : string, 

    /**
     * The base address of the module.
     */
    base    : NativePointer,

    /**
     * The cave address of the module.
     * This is an optional field.
     */
    cave?   : NativePointer,

    /**
     * The symbols of the module.
     * Each symbol is a key-value pair, where the key is the symbol name and the value is the symbol address.
     */
    symbols : {[key:string]:NativePointer},

    /**
     * The hook ids of the module.
     * Each hook id is a key-value pair, where the key is the hook id name and the value is the hook id value or null.
     */
    hookids : {[key:string]:null | InvocationListener},

    /**
     * The functions of the module.
     * Each function is a key-value pair, where the key is the function name and the value is an object containing the hook, unhook, and call functions.
     */
    functions : {[key:string]:{

        /**
         * The hook function of the module.
         */
        hook:Function,

        /**
         * The unhook function of the module.
         */
        unhook:Function,

        /**
         * The call function of the module.
         */
        call:Function,

    }},

    /**
     * The variables of the module.
     * This is an empty object.
     */
    variables : {[key:string]:{

    }},


};


type PATCHLIB_INFO_TYPE  = {


    unload      : ()=>void,

    
    name        : string,

    base        : NativePointer,

    load_size  ?: number;


    cave        : NativePointer,


    symbols     : {[key:string]:NativePointer},

    inits      ?: NativePointer[];

};

const resolveSymbol = (
        symbolName: string,
        libraries?: (MODINFO_BASETYPE | string)[],
        resolvedSymbols: { [key: string]: NativePointer } = {},
        options: { useFindSymbols?: boolean } = {},
        ): NativePointer => {
    const useFindSymbols = options.useFindSymbols || false;

    let resolvedSymbol: NativePointer | undefined = resolvedSymbols[symbolName];

    if (resolvedSymbol) {
        return resolvedSymbol;
    }

    const findSymbolInModule = (moduleName: string): NativePointer | undefined => {
        const exportByName = Module.findExportByName(moduleName, symbolName) || undefined;
        return exportByName;
    };

    if (libraries) {
        for (const library of libraries) {
            if (typeof library === 'string') {
                resolvedSymbol = findSymbolInModule(library);

                if (resolvedSymbol) {
                    return resolvedSymbol;
                }

                const module = Process.findModuleByName(library);
                if (module) {
                    resolvedSymbol = module.enumerateExports().find((exportedSymbol) => exportedSymbol.name === symbolName)?.address;

                    if (resolvedSymbol) {
                        return resolvedSymbol;
                    }

                    if (useFindSymbols) {
                        resolvedSymbol = module.enumerateSymbols().find((symbol) => symbol.name === symbolName)?.address;
                        if (resolvedSymbol) {
                            return resolvedSymbol;
                        }
                    }
                }
            } else {
                resolvedSymbol = findSymbolInModule(library.name);
                if (resolvedSymbol) {
                    return resolvedSymbol;
                }

                resolvedSymbol = library.symbols[symbolName];
                if (resolvedSymbol) {
                    return resolvedSymbol;
                }
            }
        }
    }

    resolvedSymbol = Module.findExportByName(null, symbolName) ?? undefined;
    if (resolvedSymbol) {
        return resolvedSymbol;
    }

    const modules = Process.enumerateModules();
    if (modules) {
        for (const module of modules) {
            resolvedSymbol = module.findExportByName(symbolName) ?? undefined;
            if (resolvedSymbol) {
                return resolvedSymbol;
            }

            resolvedSymbol = module.enumerateSymbols().find((symbol) => symbol.name === symbolName)?.address;
            if (resolvedSymbol) {
                return resolvedSymbol;
            }
        }
    }

    throw new Error(`Unable to resolve symbol ${symbolName}`);
};


const readFileData = (fpath: string, sz?: number, offset: number = 0): ArrayBuffer => {
    const platform = Process.platform;
    if (platform === 'linux' || platform === 'windows') {
        const fopen = new NativeFunction(Module.getExportByName(null, 'fopen'), 'pointer', ['pointer', 'pointer']);
        const fseek = new NativeFunction(Module.getExportByName(null, 'fseek'), 'int', ['pointer', 'long', 'int']);
        const ftell = new NativeFunction(Module.getExportByName(null, 'ftell'), 'int', ['pointer']);
        const fclose = new NativeFunction(Module.getExportByName(null, 'fclose'), 'int', ['pointer']);
        const fread = new NativeFunction(Module.getExportByName(null, 'fread'), 'size_t', ['pointer', 'size_t', 'size_t', 'pointer']);
        const SEEK_SET = 0;
        const SEEK_CUR = 1;
        const SEEK_END = 2;

        const fp = fopen(Memory.allocUtf8String(fpath), Memory.allocUtf8String('rb'));
        if (fp.isNull()) {
            throw new Error(`open ${fpath} failed`);
        }

        if(sz==undefined){
            // Get the file size
            fseek(fp, 0, SEEK_END);
            sz = ftell(fp);
            fseek(fp, 0, SEEK_SET);
        }

        const buf = Memory.alloc(sz);
        fseek(fp, offset, SEEK_SET);
        const read = fread(buf, 1, sz, fp);
        if (read.toNumber() !== sz) {
            (globalThis as any). console .log(`error at read file ${fpath}, ${read}/${sz}`);
        }
        const ab = buf.readByteArray(sz);
        if (ab === null) {
            throw new Error(`read byte array failed when read file ${fpath}`);
        }
        fclose(fp);
        return ab;
    } else {
        throw new Error(`unhandled platform ${platform}`);
    }
}

{% endif %}

let base = ptr(0); // avoid frida free allocated buffer 

const mod_init  = (base:NativePointer)=>{
    // initialize codes
    {% for t in  info['inits'] %}new NativeFunction(base.add({{t}}), 'void', [])();
    {% endfor %}
}

const mod_deinit  = (base:NativePointer)=>{
    // uninitialize codes
    {% for t in  info['deinits'] %}new NativeFunction(base.add({{t}}), 'void', [])();
    {% endfor %}
}


export const mod  = {

{% if info['mode'] == 'load' %}
    {% if info['has_content'] %}
        load: (libs: (MODINFO_BASETYPE|string)[] = [], syms:{[key:string]:NativePointer}={}, init:boolean=true):PATCHLIB_INFO_TYPE=>{
    {% else %}
        load: (sopath:string, libs: (MODINFO_BASETYPE|string)[] =[], syms:{[key:string]:NativePointer} ={}, init:boolean=true):PATCHLIB_INFO_TYPE=>{
    {% endif %}


            base = Memory.alloc({{  info['load_size']  }});
            console.log('base', base);
            Memory.protect(base, {{info['load_size']}}, 'rwx');

            ////////////////////////////////////////////////////////////////////////////////
            // load content
        {% if info['has_content'] %}
            {% for t in  info['loads'] %}base.add({{t['virtual_address']}}).writeByteArray([{{t['content_ts']}}]);
            {% endfor %}
        {% else %}
            {% for t in  info['loads'] %}base.add({{t['virtual_address']}}).writeByteArray(readFileData(sopath, {{t['size']}}, {{t['file_offset']}}));
            {% endfor %}
        {% endif %}

            ////////////////////////////////////////////////////////////////////////////////
            // handle relocation
            {% for t in  info['patches'] %}{{t}}  
            {% endfor %}

            ////////////////////////////////////////////////////////////////////////////////
            if(init) mod_init(base);
        
        {% if 'name' in info and info['name'] | length >0 %}
            let name = '{{ info["name"]}}'; 
        {% else %}
            'name' is not in info with load mode
        {% endif %}

{% elif info['mode'] == 'get' %}
    {% if 'name' in info and info['name'] | length >0 %}
        get: (soname?:string, libs?: (MODINFO_BASETYPE|string)[], syms?:{[key:string]:NativePointer}):PATCHLIB_INFO_TYPE=>{
            let name = '{{ info["name"]}}'; 
            if(soname!=undefined) name = soname;
    {% else %}
        get: (soname:string, libs?: (MODINFO_BASETYPE|string)[], syms?:{[key:string]:NativePointer}):PATCHLIB_INFO_TYPE=>{
            let name = soname;
    {% endif %}
            base = Process.getModuleByName(name).base;
    {% endif %}
        

            const ___info:PATCHLIB_INFO_TYPE = {
        {% if info['mode'] == 'load' %}
                unload      : ()=>{
                    //unhook 
                    mod_deinit(base);

                    // free
                    base=ptr(0);
                },
        {% endif %}

                name        : name,

                base        : base,
            {% if info['mode'] == 'load' %}
                load_size   : {{ info['load_size'] }},
            {% endif %}

            {% if 'cave_offset' in info %}
                cave        : base.add({{info['cave_offset']}}),
            {% endif %}

                symbols     : {
                    {% for k, v in  info['symbols'].items() %}{% if 'offset' in v %}{{k}}: base.add({{v['offset']}}),{% else %}{{k}}: Module.findExportByName(name, '{{k}}') ?? resolveSymbol('{{k}}', libs, syms),{% endif %}
                    {% endfor %}
                },

            {% if info['mode'] == 'load' %}
                inits: init? undefined : [

                    {% for t in  info['inits'] %}ptr({{t}}),
                    {% endfor %}

                ],
            {% endif %}
            };
            return ___info;
        },

}

