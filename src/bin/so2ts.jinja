
import 'ts-frida'

namespace Patch {

let base = ptr(0); // avoid frida free allocated buffer 

const mod_init  = (base:NativePointer)=>{
    // initialize codes
    {% for t in  info['inits'] %}new NativeFunction(base.add({{t}}), 'void', [])();
    {% endfor %}
}

const mod_deinit  = (base:NativePointer)=>{
    // uninitialize codes
    {% for t in  info['deinits'] %}new NativeFunction(base.add({{t}}), 'void', [])();
    {% endfor %}
}


export const mod  = {

{% if info['mode'] == 'load' %}
    {% if info['no_content'] %}
        load: (sopath:string, libs: (Utils.MODINFO_BASETYPE|string)[] =[], syms:{[key:string]:NativePointer} ={}, init:boolean=true):Utils.PATHLIB_INFO_TYPE=>{
    {% else %}
        load: (libs: (Utils.MODINFO_BASETYPE|string)[] = [], syms:{[key:string]:NativePointer}={}, init:boolean=true):Utils.PATHLIB_INFO_TYPE=>{
    {% endif %}


            base = Memory.alloc({{  info['load_size']  }});
            console.log('base', base);
            Memory.protect(base, {{info['load_size']}}, 'rwx');

            ////////////////////////////////////////////////////////////////////////////////
            // load content
        {% if info['no_content'] %}
            {% for t in  info['loads'] %}base.add({{t['virtual_address']}}).writeByteArray(Utils.readFileData(sopath, {{t['size']}}, {{t['file_offset']}}));
            {% endfor %}
        {% else %}
            {% for t in  info['loads'] %}base.add({{t['virtual_address']}}).writeByteArray([{{t['content_ts']}}]);
        {% endfor %}
    {% endif %}

            ////////////////////////////////////////////////////////////////////////////////
            // handle relocation
            {% for t in  info['patches'] %}{{t}}  
            {% endfor %}

            ////////////////////////////////////////////////////////////////////////////////
            if(init) mod_init(base);
        
        {% if 'name' in info and info['name'] | length >0 %}
            let name = '{{ info["name"]}}'; 
        {% else %}
            'name' is not in info with load mode
        {% endif %}

{% elif info['mode'] == 'get' %}
    {% if 'name' in info and info['name'] | length >0 %}
        get: (soname?:string, libs?: (Utils.MODINFO_BASETYPE|string)[], syms?:{[key:string]:NativePointer}):Utils.PATHLIB_INFO_TYPE=>{
            let name = '{{ info["name"]}}'; 
            if(soname!=undefined) name = soname;
    {% else %}
        get: (soname:string, libs?: (Utils.MODINFO_BASETYPE|string)[], syms?:{[key:string]:NativePointer}):Utils.PATHLIB_INFO_TYPE=>{
            let name = soname;
    {% endif %}
            base = Process.getModuleByName(name).base;
    {% endif %}
        

            const ___info:Utils.PATHLIB_INFO_TYPE = {
        {% if info['mode'] == 'load' %}
                unload      : ()=>{
                    //unhook 
                    mod_deinit(base);

                    // free
                    base=ptr(0);
                },
        {% endif %}

                name        : name,

                base        : base,
            {% if info['mode'] == 'load' %}
                load_size   : {{ info['load_size'] }},
            {% endif %}

            {% if 'cave_offset' in info %}
                cave        : base.add({{info['cave_offset']}}),
            {% endif %}

                symbols     : {
                    {% for k, v in  info['symbols'].items() %}{% if 'offset' in v %}{{k}}: base.add({{v['offset']}}),{% else %}{{k}}: Module.findExportByName(name, '{{k}}') ?? Utils.resolveSymbol('{{k}}', libs, syms),{% endif %}
                    {% endfor %}
                },

            {% if info['mode'] == 'load' %}
                inits: init? undefined : [

                    {% for t in  info['inits'] %}ptr({{t}}),
                    {% endfor %}

                ],
            {% endif %}
            };
            return ___info;
        },

}

}

// (globalThis as any).Patch = Patch;